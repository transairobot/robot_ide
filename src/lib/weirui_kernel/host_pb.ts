// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: src/lib/weirui_kernel/host_pb.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

/** Unified result wrapper for all host function responses */
export interface HostResult {
  /** 0 = success, non-zero = error */
  errorCode?:
    | number
    | undefined;
  /** Human-readable error description */
  errorMessage?:
    | string
    | undefined;
  /** Serialized response data (specific message type) */
  data?: Uint8Array | undefined;
}

export interface RunTargetActionReq {
  servoIdVec: number[];
  targetRadVec: number[];
}

export interface RunTargetActionResp {
  servoIdVec: number[];
  targetRadVec: number[];
}

function createBaseHostResult(): HostResult {
  return { errorCode: 0, errorMessage: "", data: new Uint8Array(0) };
}

export const HostResult: MessageFns<HostResult> = {
  encode(message: HostResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorCode !== undefined && message.errorCode !== 0) {
      writer.uint32(8).int32(message.errorCode);
    }
    if (message.errorMessage !== undefined && message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.data !== undefined && message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HostResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostResult {
    return {
      errorCode: isSet(object.errorCode) ? gt.Number(object.errorCode) : 0,
      errorMessage: isSet(object.errorMessage) ? gt.String(object.errorMessage) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: HostResult): unknown {
    const obj: any = {};
    if (message.errorCode !== undefined && message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.errorMessage !== undefined && message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.data !== undefined && message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HostResult>, I>>(base?: I): HostResult {
    return HostResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HostResult>, I>>(object: I): HostResult {
    const message = createBaseHostResult();
    message.errorCode = object.errorCode ?? 0;
    message.errorMessage = object.errorMessage ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRunTargetActionReq(): RunTargetActionReq {
  return { servoIdVec: [], targetRadVec: [] };
}

export const RunTargetActionReq: MessageFns<RunTargetActionReq> = {
  encode(message: RunTargetActionReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servoIdVec) {
      writer.uint32(8).uint32(v!);
    }
    for (const v of message.targetRadVec) {
      writer.uint32(21).float(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunTargetActionReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunTargetActionReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.servoIdVec.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.servoIdVec.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 21) {
            message.targetRadVec.push(reader.float());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targetRadVec.push(reader.float());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunTargetActionReq {
    return {
      servoIdVec: gt.Array.isArray(object?.servoIdVec) ? object.servoIdVec.map((e: any) => gt.Number(e)) : [],
      targetRadVec: gt.Array.isArray(object?.targetRadVec) ? object.targetRadVec.map((e: any) => gt.Number(e)) : [],
    };
  },

  toJSON(message: RunTargetActionReq): unknown {
    const obj: any = {};
    if (message.servoIdVec?.length) {
      obj.servoIdVec = message.servoIdVec.map((e) => Math.round(e));
    }
    if (message.targetRadVec?.length) {
      obj.targetRadVec = message.targetRadVec;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunTargetActionReq>, I>>(base?: I): RunTargetActionReq {
    return RunTargetActionReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunTargetActionReq>, I>>(object: I): RunTargetActionReq {
    const message = createBaseRunTargetActionReq();
    message.servoIdVec = object.servoIdVec?.map((e) => e) || [];
    message.targetRadVec = object.targetRadVec?.map((e) => e) || [];
    return message;
  },
};

function createBaseRunTargetActionResp(): RunTargetActionResp {
  return { servoIdVec: [], targetRadVec: [] };
}

export const RunTargetActionResp: MessageFns<RunTargetActionResp> = {
  encode(message: RunTargetActionResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servoIdVec) {
      writer.uint32(8).uint32(v!);
    }
    for (const v of message.targetRadVec) {
      writer.uint32(21).float(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunTargetActionResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunTargetActionResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.servoIdVec.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.servoIdVec.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 21) {
            message.targetRadVec.push(reader.float());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targetRadVec.push(reader.float());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunTargetActionResp {
    return {
      servoIdVec: gt.Array.isArray(object?.servoIdVec) ? object.servoIdVec.map((e: any) => gt.Number(e)) : [],
      targetRadVec: gt.Array.isArray(object?.targetRadVec) ? object.targetRadVec.map((e: any) => gt.Number(e)) : [],
    };
  },

  toJSON(message: RunTargetActionResp): unknown {
    const obj: any = {};
    if (message.servoIdVec?.length) {
      obj.servoIdVec = message.servoIdVec.map((e) => Math.round(e));
    }
    if (message.targetRadVec?.length) {
      obj.targetRadVec = message.targetRadVec;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunTargetActionResp>, I>>(base?: I): RunTargetActionResp {
    return RunTargetActionResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunTargetActionResp>, I>>(object: I): RunTargetActionResp {
    const message = createBaseRunTargetActionResp();
    message.servoIdVec = object.servoIdVec?.map((e) => e) || [];
    message.targetRadVec = object.targetRadVec?.map((e) => e) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if ((gt as any).Buffer) {
    return Uint8Array.from(gt.Buffer.from(b64, "base64"));
  } else {
    const bin = gt.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((gt as any).Buffer) {
    return gt.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(gt.String.fromCharCode(byte));
    });
    return gt.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
